1.搭建maven快启动Webapp项目
+1 pom文件jar包配置
2.加入Spring框架，维护bean
3.加入springmvc框架，进行资源访问
4.加入mybatis框架，操作mysql表中数据
5.注意web.xml、applicationContext.xml、spring-mvc.xml以及mybatis.xml文件的配置
6.2-23重点学习spring中的事务管理
7.使用mybatis逆向工程生成mybatis映射文件及实体

重点内容：spring与mybatis的三种整合方法
    ①使用MapperScannerConfigurer,它会查照类路径下的映射器并将它们创建成MapperFactoryBean
    ②使用实现了SqlSession接口的实现类SqlSessionTemplate(需要注入sqlSessionFactory),DAO层
    需要使用@repository {配置文件中注册SqlSessionTemplate}
    ③使用继承抽象类SqlSessionDaoSupport,通过set方法注入sqlSessionFactory,Dao层同样需要@repository

问题1：为什么*mapper的接口不用@repository注解，却可以注入接口的实体类呢？
因为在spring的配置文件中，我们配置了MapperScannerConfigurer,它会将指定包下的
所有Mapper接口生成实体类，交给Spring去管理
问题2： 为什么SqlSessionFactoryBean的configLocation（mybatis的配置文件）可以不用配置？
Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration
问题3： @Autowired和@Resource的区别
@Autowired 按照类型byType装配依赖对象，如果运行null，则需要设置required=false
            如果想通过byName装配，则搭配@Qualifier一起使用
@Resource 默认按照byName装配依赖对象
          同时指定name和type，则匹配唯一bean,找不到则抛出异常
          指定name，则查找名称匹配的bean,找不到则抛出异常
          指定type,则按照类型匹配，找不到或者多个都会抛出异常
          都没有指定，则按照byName方式进行装配（字段上则采用字段名称，setter方法上则采用属性名称），
            没有匹配到则回退为一个原始类型进行匹配，匹配到则自动装配
另外：@PathVariable @RequestParam 中的name和value等价，两个写一个即可（不可以都写）

web.xml 配置
注册自定义servlet
注册全局字符编码过滤器filter(针对get请求无效)
注册dispatcherservlet
注册默认欢迎页
配置spring监听器（web监听器&&context-param）
配置logback监听器

spring 配置
扫描除controller注解外的类，并实例化
扫描properties文件，读取配置
配置数据库连接池


springmvc 配置
注册handlerAdapter,handlerMapping,viewResolver
扫描controller注解的类，并实例化
标识js,css,jpg等文件为静态文件，不处理该请求
注册消息转换器，配置json,xml的支持

即将加入的功能
①权限控制 shiro
②邮件  javax.mail（√）
③定时任务 Quartz

2-24
使用spring-test进行单元测试
①测试bean
②测试mvc
发送邮件
①普通文本
②html
③freemarker模板
④velocity模板

